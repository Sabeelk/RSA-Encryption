import java.math.BigInteger;

public class RSA {
		final static BigInteger ZERO = new BigInteger("0");
		final static BigInteger ONE = new BigInteger("1");
		public static final BigInteger INIT_NUMBER = new BigInteger("2");
		public static BigInteger d;
		public static BigInteger n;

		//function for finding the value of D, part 2
    public static BigInteger calc(BigInteger p, BigInteger q, BigInteger e){
			n = p.multiply(q);                       //n
			BigInteger q2 = q.subtract(new BigInteger("1"));
			BigInteger z = p.subtract(new BigInteger("1"));
			z = z.multiply(q2);                                 //z

			//now find d, 1 mod z
			//extended euclidian algorithm
			return modInv(e, z);

    }

    // Function wiritten by Arup Guha
    // Written in CIS 3362 on 11/9/06
    // Extended Euclidean Algorithm using BigInteger
    public static BigInteger modInv(BigInteger value, BigInteger n) {
		
			// Set up all initial values.
			BigInteger b0 = value;
			BigInteger n0 = n;
			BigInteger t0 = ZERO;
			BigInteger t = ONE;
			BigInteger q = n.divide(b0);
			BigInteger r = n0.subtract(q.multiply(b0));
			
			// Loop while the remainder in the successive divisions is positive.
			while (r.compareTo(ZERO) > 0) {
				
				// Simulates the subtraction step in the Extended Euclidean Alg.
				BigInteger temp = t0.subtract(q.multiply(t));
				
				// Adjust temp if it's negative.
				if (temp.compareTo(ZERO) > 0)
					temp = temp.mod(n);
				if (temp.compareTo(ZERO) < 0)
					temp = n.subtract(temp.negate().mod(n));
				
				// Update each variable as necessary.
				t0 = t;
				t = temp;
				n0 = b0;
				b0 = r;
				q = n0.divide(b0);
				r = n0.subtract(q.multiply(b0));
			}
			
			// Print out the GCD of value and n.
			System.out.println("GCD is "+b0);
			
			// No inverse!
			if (!b0.equals(ONE))
				return null;
				
			// Here's the inverse!	
			else {
				d = t.mod(n);
				return t.mod(n);
			}
	}

	//function for finding the value of B, Pt3
	public static BigInteger diffie(BigInteger cypher){
		return cypher.modPow(d, n);
	}

	public static void main(String[] args ){
		BigInteger p = new BigInteger("24911664231471810163974575262677511359815533753625435890921885231817858390419583498744439268833382982418379495885497145744486471251901430148390798931560988695838876749090879149225945799498066151722051204488884437793300237816402625711097404183282960192735131642342327281363989091338853750155687433427942193150458069449192418550978869001324699114717201084731480563969368083514207149627970469774418942599642420370332366004161982623610059237180015034716826211043220462552387807759258557777121497992454021938237297472620872127219149082573085700288825586677215615841198855070210381205067006076915729111344338209774360195489");
		BigInteger q = new BigInteger("30107325155187948266156521976478744981112632215000366381670075781069550860345406304820029837935420619939464869143589136950004739791090091882961100138933525840597853456231235050448675606232266328759268930847093988904825692714423543013442659478272358956935767474930945236522535253923428841314310102124695486790252485321060472771788470504959573957162888605432827445457158838830451356433663190421733868191368189125771851341741967476843658112537666334374931885549034070750299562973956833025916037584270295350111621288591416933266778481070951226777089973105832101888965845447011033063850927147763764272144144944399782486829");
		BigInteger e = new BigInteger("842654841401595339743032989608588617309886473987361285144430662484200952432801490898355147113684546248124710281061731636297197163350364633422607405624556326777760147683855315056511397562235104005688364299381427161019720170668220938257788969859033426451911198664092046696169659969088225461560673558482441886527416813962172682154176988804070131696582197407603673742464191125108710303739744301406493178602544685064337799745754946352361877950313931775393689019276703654907030976865219506075324075901238038027379213850810264604230390060038147035171838648826742456973853798332183946922222673477606443814261150687491205511991688607015698179082834474538513410615911760520437327535949381544673680297930617569916952969778408922836110554231246964879386627759783323486003958325446667250364353562608227976953010528042363488283128082001871846984463051150242444689617533106395644556829297547036355219354133401570379503720056040817880506122301197465528764357861476451936549655227946748041532744280103229119811354023964550452623737935739844538746719432311627024937024843200576956105466529781610431960271623152607832426205061046179982060702969378343901643128331351733511398003449045199166570446536163029042763210968999482450735935813283330698058620097");
		BigInteger cypher = new BigInteger("3170175436056389815026922396003300956040582733459522081434364126025262220173290974816041029194689600117439540293024551660493311864899294204154868398238995761904161063831551701664284165123480368701358253110020012246608905258149903459154000283846744597747681067203206408685860942562674496668653198083193244197955933111453403357312768534176308259814663577427529979886757936527529646697248863963580923919702480321089159433594458441590487693863503769747490169847035779982336154741004671500065139117214389031958816945866200400663519449811824999537358858740420475596620704691226959132984157618792004910902492428559489384057899456386059972689522579448532943982291526875822482906957081981874481075143290690854191369203555981350422951968905627581465872425670485804086962664199489322811634332841309259021757215565381028354093432227654889351411850252760531556746731982104908218956820546289370973073797634292425916109227530832128907628522028659645509879762074271085612280650783675625400849790056319104741281861241764093208653978083961540238930366790332203485730217893254509853765306951778555869360118719607153903633133989005902422929832125322054445665678552572347253397631880630313878092185288527229227192271206077714566821750604628477405211161");

		System.out.println("The D is: " + calc(p, q, e));
		System.out.println("The B is: " + diffie(cypher));
	}
}